function [methodinfo,structs,enuminfo,ThunkLibName]=dynamixel_proto
%DYNAMIXEL_PROTO Create structures to define interfaces found in 'dynamixel_sdk'.

%This function was generated by loadlibrary.m parser version  on Sat Jan 13 21:29:14 2024
%perl options:'dynamixel_sdk.i -outfile=dynamixel_proto.m -thunkfile=dxl_x64_c_thunk_pcwin64.c -header=dynamixel_sdk.h port_handler.h packet_handler.h group_bulk_read.h group_bulk_write.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'dxl_x64_c_thunk_pcwin64');
%  int portHandler ( const char * port_name ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='portHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  uint8_t openPort ( int port_num ); 
fcns.thunkname{fcnNum}='uint8int32Thunk';fcns.name{fcnNum}='openPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void closePort ( int port_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='closePort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void clearPort ( int port_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='clearPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void setPortName ( int port_num , const char * port_name ); 
fcns.thunkname{fcnNum}='voidint32cstringThunk';fcns.name{fcnNum}='setPortName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  char * getPortName ( int port_num ); 
fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='getPortName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  uint8_t setBaudRate ( int port_num , const int baudrate ); 
fcns.thunkname{fcnNum}='uint8int32int32Thunk';fcns.name{fcnNum}='setBaudRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int getBaudRate ( int port_num ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='getBaudRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int readPort ( int port_num , uint8_t * packet , int length ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='readPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int writePort ( int port_num , uint8_t * packet , int length ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='writePort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  void setPacketTimeout ( int port_num , uint16_t packet_length ); 
fcns.thunkname{fcnNum}='voidint32uint16Thunk';fcns.name{fcnNum}='setPacketTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'uint16'};fcnNum=fcnNum+1;
%  void setPacketTimeoutMSec ( int port_num , double msec ); 
fcns.thunkname{fcnNum}='voidint32doubleThunk';fcns.name{fcnNum}='setPacketTimeoutMSec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
%  uint8_t isPacketTimeout ( int port_num ); 
fcns.thunkname{fcnNum}='uint8int32Thunk';fcns.name{fcnNum}='isPacketTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void packetHandler (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='packetHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  const char * getTxRxResult ( int protocol_version , int result ); 
fcns.thunkname{fcnNum}='cstringint32int32Thunk';fcns.name{fcnNum}='getTxRxResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  const char * getRxPacketError ( int protocol_version , uint8_t error ); 
fcns.thunkname{fcnNum}='cstringint32uint8Thunk';fcns.name{fcnNum}='getRxPacketError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
%  int getLastTxRxResult ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='getLastTxRxResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint8_t getLastRxPacketError ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='uint8int32int32Thunk';fcns.name{fcnNum}='getLastRxPacketError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  void setDataWrite ( int port_num , int protocol_version , uint16_t data_length , uint16_t data_pos , uint32_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint16uint16uint32Thunk';fcns.name{fcnNum}='setDataWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  uint32_t getDataRead ( int port_num , int protocol_version , uint16_t data_length , uint16_t data_pos ); 
fcns.thunkname{fcnNum}='uint32int32int32uint16uint16Thunk';fcns.name{fcnNum}='getDataRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void txPacket ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='txPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  void rxPacket ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='rxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  void txRxPacket ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='txRxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  void ping ( int port_num , int protocol_version , uint8_t id ); 
fcns.thunkname{fcnNum}='voidint32int32uint8Thunk';fcns.name{fcnNum}='ping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
%  uint16_t pingGetModelNum ( int port_num , int protocol_version , uint8_t id ); 
fcns.thunkname{fcnNum}='uint16int32int32uint8Thunk';fcns.name{fcnNum}='pingGetModelNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
%  void broadcastPing ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='broadcastPing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint8_t getBroadcastPingResult ( int port_num , int protocol_version , int id ); 
fcns.thunkname{fcnNum}='uint8int32int32int32Thunk';fcns.name{fcnNum}='getBroadcastPingResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  void reboot ( int port_num , int protocol_version , uint8_t id ); 
fcns.thunkname{fcnNum}='voidint32int32uint8Thunk';fcns.name{fcnNum}='reboot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
%  void clearMultiTurn ( int port_num , int protocol_version , uint8_t id ); 
fcns.thunkname{fcnNum}='voidint32int32uint8Thunk';fcns.name{fcnNum}='clearMultiTurn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
%  void factoryReset ( int port_num , int protocol_version , uint8_t id , uint8_t option ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint8Thunk';fcns.name{fcnNum}='factoryReset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  void readTx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='readTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void readRx ( int port_num , int protocol_version , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint16Thunk';fcns.name{fcnNum}='readRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16'};fcnNum=fcnNum+1;
%  void readTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='readTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void read1ByteTx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16Thunk';fcns.name{fcnNum}='read1ByteTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  uint8_t read1ByteRx ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='uint8int32int32Thunk';fcns.name{fcnNum}='read1ByteRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint8_t read1ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='uint8int32int32uint8uint16Thunk';fcns.name{fcnNum}='read1ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  void read2ByteTx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16Thunk';fcns.name{fcnNum}='read2ByteTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  uint16_t read2ByteRx ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='uint16int32int32Thunk';fcns.name{fcnNum}='read2ByteRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint16_t read2ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='uint16int32int32uint8uint16Thunk';fcns.name{fcnNum}='read2ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  void read4ByteTx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16Thunk';fcns.name{fcnNum}='read4ByteTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  uint32_t read4ByteRx ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='read4ByteRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint32_t read4ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address ); 
fcns.thunkname{fcnNum}='uint32int32int32uint8uint16Thunk';fcns.name{fcnNum}='read4ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  void writeTxOnly ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='writeTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void writeTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='writeTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void write1ByteTxOnly ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint8_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint8Thunk';fcns.name{fcnNum}='write1ByteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint8'};fcnNum=fcnNum+1;
%  void write1ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint8_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint8Thunk';fcns.name{fcnNum}='write1ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint8'};fcnNum=fcnNum+1;
%  void write2ByteTxOnly ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='write2ByteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void write2ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='write2ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void write4ByteTxOnly ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint32_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint32Thunk';fcns.name{fcnNum}='write4ByteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  void write4ByteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint32_t data ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint32Thunk';fcns.name{fcnNum}='write4ByteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  void regWriteTxOnly ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='regWriteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void regWriteTxRx ( int port_num , int protocol_version , uint8_t id , uint16_t address , uint16_t length ); 
fcns.thunkname{fcnNum}='voidint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='regWriteTxRx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void syncReadTx ( int port_num , int protocol_version , uint16_t start_address , uint16_t data_length , uint16_t param_length ); 
fcns.thunkname{fcnNum}='voidint32int32uint16uint16uint16Thunk';fcns.name{fcnNum}='syncReadTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void syncWriteTxOnly ( int port_num , int protocol_version , uint16_t start_address , uint16_t data_length , uint16_t param_length ); 
fcns.thunkname{fcnNum}='voidint32int32uint16uint16uint16Thunk';fcns.name{fcnNum}='syncWriteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void bulkReadTx ( int port_num , int protocol_version , uint16_t param_length ); 
fcns.thunkname{fcnNum}='voidint32int32uint16Thunk';fcns.name{fcnNum}='bulkReadTx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16'};fcnNum=fcnNum+1;
%  void bulkWriteTxOnly ( int port_num , int protocol_version , uint16_t param_length ); 
fcns.thunkname{fcnNum}='voidint32int32uint16Thunk';fcns.name{fcnNum}='bulkWriteTxOnly'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16'};fcnNum=fcnNum+1;
%  int groupBulkRead ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='groupBulkRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint8_t groupBulkReadAddParam ( int group_num , uint8_t id , uint16_t start_address , uint16_t data_length ); 
fcns.thunkname{fcnNum}='uint8int32uint8uint16uint16Thunk';fcns.name{fcnNum}='groupBulkReadAddParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void groupBulkReadRemoveParam ( int group_num , uint8_t id ); 
fcns.thunkname{fcnNum}='voidint32uint8Thunk';fcns.name{fcnNum}='groupBulkReadRemoveParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
%  void groupBulkReadClearParam ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkReadClearParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void groupBulkReadTxPacket ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkReadTxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void groupBulkReadRxPacket ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkReadRxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void groupBulkReadTxRxPacket ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkReadTxRxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  uint8_t groupBulkReadIsAvailable ( int group_num , uint8_t id , uint16_t address , uint16_t data_length ); 
fcns.thunkname{fcnNum}='uint8int32uint8uint16uint16Thunk';fcns.name{fcnNum}='groupBulkReadIsAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  uint32_t groupBulkReadGetData ( int group_num , uint8_t id , uint16_t address , uint16_t data_length ); 
fcns.thunkname{fcnNum}='uint32int32uint8uint16uint16Thunk';fcns.name{fcnNum}='groupBulkReadGetData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int groupBulkWrite ( int port_num , int protocol_version ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='groupBulkWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  uint8_t groupBulkWriteAddParam ( int group_num , uint8_t id , uint16_t start_address , uint16_t data_length , uint32_t data , uint16_t input_length ); 
fcns.thunkname{fcnNum}='uint8int32uint8uint16uint16uint32uint16Thunk';fcns.name{fcnNum}='groupBulkWriteAddParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16', 'uint32', 'uint16'};fcnNum=fcnNum+1;
%  void groupBulkWriteRemoveParam ( int group_num , uint8_t id ); 
fcns.thunkname{fcnNum}='voidint32uint8Thunk';fcns.name{fcnNum}='groupBulkWriteRemoveParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'uint8'};fcnNum=fcnNum+1;
%  uint8_t groupBulkWriteChangeParam ( int group_num , uint8_t id , uint16_t start_address , uint16_t data_length , uint32_t data , uint16_t input_length , uint16_t data_pos ); 
fcns.thunkname{fcnNum}='uint8int32uint8uint16uint16uint32uint16uint16Thunk';fcns.name{fcnNum}='groupBulkWriteChangeParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'uint8', 'uint16', 'uint16', 'uint32', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  void groupBulkWriteClearParam ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkWriteClearParam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void groupBulkWriteTxPacket ( int group_num ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='groupBulkWriteTxPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
structs.PacketData.members=struct('data_write', 'uint8Ptr', 'data_read', 'uint8Ptr', 'tx_packet', 'uint8Ptr', 'rx_packet', 'uint8Ptr', 'error', 'uint8', 'communication_result', 'int32', 'broadcast_ping_id_list', 'uint8Ptr');
methodinfo=fcns;